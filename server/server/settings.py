"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-o-nxj%(@9q_vjr8i78*#e*s#1!ad#l9-yki=-qh+s4mjth8&4%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'djoser',
    'myapp'  # Keep only your actual Django apps
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Update AUTH_USER_MODEL to refer to the correct app and model
AUTH_USER_MODEL = "myapp.User"

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
}
SIMPLE_JWT  ={
    "AUTH_HEADER_TYPES": (
        "Bearer",
        "JWT"
        ),
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=160),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=60), 
    "SIGNING_KEY": "SIGNING_KEY",
    "AUTH_HEADER_NAME":"HTTP_AUTHORIZATION",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
}
DJOSER = {
    "LOGIN_FIELD": 'email',  # Use email as the login field instead of username
    "USER_CREATE_PASSWORD_RETYPE": True,  # Require password confirmation during registration
    "USERNAME_CHANGED_EMAIL_CONFIRMATION": True,  # Send email confirmation if username is changed
    "PASSWORD_CHANGED_EMAIL_CONFIRMATION": True,  # Send email confirmation after password change
    "SEND_ACTIVATION_EMAIL": True,  # Send an activation email on user registration
    "SEND_CONFIRMATION_EMAIL": True,  # Send an email after successful account activation
    "PASSWORD_RESET_CONFIRM_URL": "password/reset/confirm/{uid}/{token}/",  # URL for password reset
    "ACTIVATION_URL": "activate/{uid}/{token}/",  # URL for account activation
    "TOKEN_MODEL": None,  # Disable default token model (since we're using JWT)
    "SERIALIZERS": {
        "user_create": "myapp.serializers.CustomUserCreateSerializer",  # Custom user creation serializer
        "user": "myapp.serializers.CustomUserSerializer",  # Custom user serializer
        "current_user": "myapp.serializers.CustomUserSerializer",  # Current user serializer
    },
}

# Email settings
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'user@gmail.com')
DOMAIN = os.getenv('DOMAIN', 'localhost:5173')
SITE_NAME = os.getenv('SITE_NAME', 'Movie revenue')
EMAIL_HOST = os.getenv('EMAIL_HOST', 'sandbox.smtp.mailtrap.io')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', 'aa0d7381fa70d0')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '0ef1a8a1b7243e')  # Ensure this is correct
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 2525))  # Ensure this is correct

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
]

CORS_ALLOW_CREDENTIALS = True